[
    {
        "name": "intro",
        "desc": "Introduction",
        "available_to": ["shell", "console"],
        "entry": "hook",
        "practice": {
            "hook": {
                "input": "text",
                "mapper": ["input",
                    {
                        "type": "regex",
                        "value": ".*"
                    }
                ],
                "example": {
                    "success": "yes"
                }
            },
            "enable_wobbly_windows": {
                "input": "text",
                "mapper": ["input",
                    {
                        "type": "equal_to",
                        "value": "wobbly_window = true;"
                    }
                ],
                "example": {
                    "success": "wobbly_window = true;",
                    "failure": "wobbly_not_window = true;"
                }
            },
            "change_background_pic": {
                "input": "text",
                "mapper": [
                    "input",
                    {
                        "type": "regex",
                        "value": "newsplash"
                    }
                ],
                "example": {
                    "success": "newsplash"
                }
            },
            "install_programming_hook": {
                "input": "console",
                "mapper": [
                    "input",
                    {
                        "type": "regex",
                        "value": "^install\\-terminal$"
                    }
                ],
                "example": {
                    "success": "install-terminal",
                    "failure": "install-terminal-no"
                }
            }
        }
    },
    {
        "name": "yoursystem",
        "desc": "System quiz",
        "available_to": [],
        "entry": "find_configs",
        "practice": {
            "find_configs": {
                "input": "console",
                "mapper": [
                    {
                        "type": "regex",
                        "value": "^\\.$"
                    }
                ],
                "example": {
                    "success": ".",
                    "failure": "other"
                }
            }
        }
    },
    {
        "name": "info",
        "desc": "Show me how to do things in this mysterious environment...",
        "available_to": ["console"],
        "entry": "showmehow",
        "practice": {
            "showmehow": {
                "input": "console",
                "mapper": [
                    {
                        "type": "shell",
                        "value": {
                            "environment": {
                                "NONINTERACTIVE": "1"
                            }
                        }
                    }, "wrapped_output",
                    {
                        "type": "regex",
                        "value": "Hey.*"
                    }
                ],
                "example": {
                    "success": "showmehow",
                    "failure": "showmehow-no"
                }
            },
            "showmehow_argument": {
                "input": "console",
                "mapper": [
                    {
                        "type": "shell",
                        "value": {
                            "environment": {
                                "NONINTERACTIVE": "1"
                            }
                        }
                    },
                    "wait_message",
                    "wrapped_output",
                    {
                        "type": "regex",
                        "value": "'showmehow' is a command.*"
                    }
                ],
                "example": {
                    "success": "showmehow info",
                    "failure": "showmehow"
                }
            }
        }
    },
    {
        "name": "fortune",
        "available_to": ["console"],
        "desc": "Tell me a joke or fortune",
        "entry": "fortune",
        "practice": {
            "fortune": {
                "input": "console",
                "mapper": ["shell",  "wait_message", "wrapped_output", {
                    "type": "regex",
                    "value": ".+"
                }],
                "example": {
                    "success": "fortune"
                }
            },
            "fortune_cowsay": {
                "input": "console",
                "mapper": ["shell", "raw_output", {
                    "type": "regex",
                    "value": "^.*_.*$"
                }],
                "example": {
                    "success": "fortune | cowsay",
                    "failure": "fortune"
                }
            }
        }
    },
    {
        "name": "readfile",
        "available_to": ["console"],
        "desc": "Read a file",
        "entry": "cat",
        "practice": {
            "cat": {
                "input": "console",
                "mapper": ["shell", "wrapped_output", {
                    "type": "regex",
                    "value": "NAME=.*"
                }],
                "example": {
                    "success": "cat /etc/os-release",
                    "failure": "cat /etc/resolv.conf"
                }
            },
            "cat_cowsay": {
                "input": "console",
                "mapper": ["shell", "raw_output", {
                    "type": "regex",
                    "value": "^.*__.*$"
                }],
                "example": {
                    "success": "cat /etc/os-release | cowsay",
                    "failure": "cat /etc/os-release"
                }
            }
        }
    },
    {
        "name": "breakit",
        "available_to": ["console"],
        "desc": "See how it is almost impossible to break anything",
        "entry": "breakit",
        "practice": {
            "breakit": {
                "input": "console",
                "mapper": ["shell", {
                    "type": "regex",
                    "value": ".*command.*"
                }],
                "example": {
                    "success": "sdfksdfdf",
                    "failure": "ls"
                }
            },
            "breakit_again": {
                "input": "console",
                "mapper": ["shell", {
                    "type": "regex",
                    "value": ".*command.*"
                }],
                "example": {
                    "success": "sdfksdfdf",
                    "failure": "ls"
                }
            }
        }
    },
    {
        "name": "changesetting",
        "available_to": ["console"],
        "desc": "Escape the terminal and tweak the OS",
        "entry": "gsettings",
        "practice": {
            "gsettings": {
                "input": "console",
                "mapper": ["shell", "raw_output", {
                    "type": "regex",
                    "value": ".*Usage.*"
                }],
                "example": {
                    "success": "gsettings",
                    "failure": "gsetings-typoed"
                }
            },
            "list_schemas": {
                "input": "console",
                "mapper": ["shell", "raw_output", {
                    "type": "regex",
                    "value": "org.*"
                }],
                "example": {
                    "success": "gsettings list-schemas",
                    "failure": "gsettings"
                }
            },
            "list_keys_help": {
                "input": "console",
                "mapper": ["shell", "raw_output", {
                    "type": "regex",
                    "value": "^.*List the keys in SCHEMA.*$"
                }],
                "example": {
                    "success": "gsettings help list-keys",
                    "failure": "gsettings"
                }
            },
            "list_settings": {
                "input": "console",
                "mapper": ["shell", "raw_output", {
                    "type": "regex",
                    "value": "^can-change-accels$"
                }],
                "example": {
                    "success": "gsettings list-keys org.gnome.desktop.interface",
                    "failure": "gsettings"
                }
            },
            "get_clock_format": {
                "input": "console",
                "mapper": ["shell", "raw_output", {
                    "type": "regex",
                    "value": "^('24h'|'12h')$"
                }],
                "example": {
                    "success": "gsettings get org.gnome.desktop.interface clock-format",
                    "failure": "gsettings get org.gnome.desktop.interface clock"
                }
            },
            "change_clock_format": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "hook": "parse_gsettings",
                        "hook_settings": {
                            "variant_type": "s"
                        }
                    }
                }, "raw_output", {
                    "type": "regex",
                    "value": "^Set org.gnome.desktop.interface clock-format to value '(24|12)h'$"
                }],
                "example": {
                    "success": "gsettings set org.gnome.desktop.interface clock-format '24h'",
                    "failure": "gsettings set org.gnome.desktop.interface clock-format '23h'"
                }
            },
            "add_terminal_pinned_help": {
                "input": "console",
                "mapper": ["shell", "raw_output", {
                    "type": "regex",
                    "value": "^\\[.*\\]$"
                }],
                "example": {
                    "success": "gsettings get org.gnome.shell favorite-apps",
                    "failure": "gsettings get org.gnome.shell wobbly-effect"
                }
            },
            "add_terminal_pinned": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "hook": "parse_gsettings",
                        "hook_settings": {
                            "variant_type": "as"
                        }
                    }
                }, "raw_output", {
                    "type": "shell_custom",
                    "value": {
                        "command": "gsettings get org.gnome.shell favorite-apps",
                        "hook": "parse_gsettings",
                        "hook_settings": {
                            "variant_type": "as"
                        }
                    }
                }, {
                    "type": "regex",
                    "value": ".*org.gnome.Terminal.*"
                }],
                "example": {
                    "success": "gsettings set org.gnome.shell favorite-apps ['org.gnome.Terminal.desktop']",
                    "failure": "gsettings set org.gnome.shell favorite-apps []"
                }
            }
        }
    },
    {
        "name": "playsong",
        "available_to": ["console"],
        "desc": "Play some music",
        "entry": "playsong",
        "practice": {
            "playsong": {
                "input": "console",
                "mapper": ["shell", "wrapped_output", {
                    "type": "regex",
                    "value": ".*"
                }],
                "example": {
                    "success": "echo hello"
                }
            }
        }
    },
    {
        "name": "navigation",
        "available_to": ["console"],
        "desc": "Learn to navigate the filesystem",
        "entry": "list",
        "requires_session": true,
        "practice": {
            "change_to_root": {
                "input": "console",
                "mapper": ["shell", {
                    "type": "shell_custom",
                    "value": {
                        "command": "ls"
                    }
                }, {
                    "type": "regex",
                    "value": ".*app.*"
                }],
                "example": {
                    "success": "cd /",
                    "failure": "cd ~"
                }
            },
            "list": {
                "input": "console",
                "mapper": ["shell", "wrapped_output", {
                    "type": "regex",
                    "value": ".*app.*"
                }],
                "example": {
                    "success": "ls",
                    "failure": "ls $HOME/.."
                }
            },
            "list_child": {
                "input": "console",
                "mapper": ["shell", "wrapped_output", {
                    "type": "regex",
                    "value": ".*shared.*"
                }],
                "example": {
                    "success": "ls $HOME/..",
                    "failure": "ls /"
                }
            },
            "pwd": {
                "input": "console",
                "mapper": ["shell", "wrapped_output", {
                    "type": "regex",
                    "value": "\/"
                }],
                "example": {
                    "success": "pwd",
                    "failure": "echo hello"
                }
            },
            "cd": {
                "input": "console",
                "mapper": ["shell", "wrapped_output", {
                    "type": "shell_custom",
                    "value": {
                        "command": "pwd"
                    }
                }, {
                    "type": "matches_environment",
                    "value": {
                        "variable": "HOME",
                        "transform": [{
                            "type": "regex_replace",
                            "value": {
                                "regex": "(\/sysroot)?(.*)\/(.*)",
                                "replace": "$2",
                                "flags": "g"
                            }
                        }, "regex_escape"],
                        "matcher": {
                            "type": "regex",
                            "value": "^@VARIABLE@$"
                        }
                    }
                }],
                "example": {
                    "success": "cd $HOME/..",
                    "failure": "cd $HOME"
                }
            },
            "cd_and_cmd": {
                "input": "console",
                "mapper": ["shell", "wrapped_output", {
                    "type": "regex",
                    "value": ".*app.*"
                }],
                "example": {
                    "success": "cd / && ls",
                    "failure": ""
                }
            },
            "mkdir": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "before": "rm -r ~/showmehow-code"
                    }
                }, "wrapped_output", {
                    "type": "check_dir_exists",
                    "value": "~/showmehow-code"
                }],
                "example": {
                    "success": "mkdir -p ~/showmehow-code",
                    "failure": "echo hello"
                }
            },
            "touch": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "before": "rm ~/showmehow-code/secret.txt"
                    }
                }, "wrapped_output", {
                    "type": "shell_custom",
                    "value": {
                        "command": "sync",
                        "runtime": "bash"
                    }
                }, {
                    "type": "check_file_exists",
                    "value": "~/showmehow-code/secret.txt"
                }],
                "example": {
                    "success": "touch $HOME/showmehow-code/secret.txt",
                    "failure": "touch $HOME/secret.txt"
                }
            },
            "write_to_secret": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "before": "rm ~/showmehow-code/secret.txt"
                    }
                }, "wrapped_output", {
                    "type": "shell_custom",
                    "value": {
                        "command": "sync",
                        "runtime": "bash"
                    }
                }, {
                    "type": "check_file_contents",
                    "value": {
                        "path": "~/showmehow-code/secret.txt",
                        "value": "kittens"
                    }
                }],
                "example": {
                    "success": "echo 'kittens' > $HOME/showmehow-code/secret.txt",
                    "failure": "echo 'cats' > $HOME/showmehow-code/secret.txt"
                }
            }
        }
    },
    {
        "name": "text",
        "available_to": ["console"],
        "desc": "Process text like a ninja",
        "entry": "cat",
        "practice": {
            "cat": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "in_data_directory": "text-processing-fs"
                    }
                }, "wrapped_output", {
                    "type": "regex",
                    "value": "^Sherlock.*"
                }],
                "example": {
                    "success": "cat sherlock.txt",
                    "failure": "cat atlas.txt"
                }
            },
            "cat_grep": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "in_data_directory": "text-processing-fs"
                    }
                }, "wrapped_output", {
                    "type": "regex",
                    "value": "^.*appeared from then to 1927.*"
                }],
                "example": {
                    "success": "cat sherlock.txt | grep 19",
                    "failure": "cat sherlock.txt | grep 20"
                }
            },
            "grep_file": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "in_data_directory": "text-processing-fs"
                    }
                }, "wrapped_output", {
                    "type": "regex",
                    "value": "^.*appeared from then to 1927.*"
                }],
                "example": {
                    "success": "grep 19 sherlock.txt",
                    "failure": "grep 20 sherlock.txt"
                }
            },
            "grep_extended_regex": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "in_data_directory": "text-processing-fs"
                    }
                }, "wrapped_output", {
                    "type": "regex",
                    "value": "^First appearing in print in 1887.*"
                }],
                "example": {
                    "success": "grep -E 1[89] sherlock.txt",
                    "failure": "grep 19 sherlock.txt"
                }
            },
            "grep_all": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "in_data_directory": "text-processing-fs"
                    }
                }, "wrapped_output", {
                    "type": "regex",
                    "value": "^.*GSettings .settings.*"
                }],
                "example": {
                    "success": "grep -R GSettings .",
                    "failure": "grep GSettings sherlock.txt"
                }
            },
            "grep_all_regex": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "in_data_directory": "text-processing-fs"
                    }
                }, "wrapped_output", {
                    "type": "regex",
                    "value": "^.*GObject.*"
                }],
                "example": {
                    "success": "grep -R -E G.+ .",
                    "failure": "grep -E G.+ sherlock.txt"
                }
            },
            "cat_atlas": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "in_data_directory": "text-processing-fs"
                    }
                }, "wrapped_output", {
                    "type": "regex",
                    "value": ".*COUNTRY.*"
                }],
                "example": {
                    "success": "cat atlas.txt",
                    "failure": "cat sherlock.txt"
                }
            },
            "awk_atlas": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "in_data_directory": "text-processing-fs"
                    }
                }, "wrapped_output", {
                    "type": "equal_to",
                    "value": "COUNTRY\nAustralia\nU.K\nBrazil\nChina\nU.S.A\nCanada\nRussia\n\n"
                }],
                "example": {
                    "success": "cat atlas.txt | awk '{ print $1 }'",
                    "failure": "cat atlas.txt"
                }
            },
            "awk_atlas_countries_sorted": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "in_data_directory": "text-processing-fs"
                    }
                }, "wrapped_output", {
                    "type": "regex",
                    "value": {
                        "single_line": true,
                        "expression": "^Australia\\s*Brazil\\s*(.|\n)*U.K\\s*U.S.A\\s*$"
                    }
                }],
                "example": {
                    "success": "cat atlas.txt | awk '{ print $1 }' | sort",
                    "failure": "cat atlas.txt"
                }
            },
            "awk_atlas_continents": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "in_data_directory": "text-processing-fs"
                    }
                }, "wrapped_output", {
                    "type": "equal_to",
                    "value": "CONTINENT\nAustralia\nEurope\nS.America\nAsia\nN.America\nN.America\nAsia\n\n"
                }],
                "example": {
                    "success": "cat atlas.txt | awk '{ print $3 }'",
                    "failure": "cat atlas.txt"
                }
            },
            "awk_atlas_continents_uniq": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "in_data_directory": "text-processing-fs"
                    }
                }, "wrapped_output", {
                    "type": "equal_to",
                    "value": "Asia\nAustralia\nCONTINENT\nEurope\nN.America\nS.America\n\n"
                }],
                "example": {
                    "success": "cat atlas.txt | awk '{ print $3 }' | sort | uniq",
                    "failure": "cat atlas.txt"
                }
            }
        }
    },
    {
        "name": "ps",
        "available_to": ["console"],
        "desc": "Get a bird's eye view of what's running on your system",
        "entry": "ps",
        "practice": {
            "ps": {
                "input": "console",
                "mapper": ["shell", "raw_output", {
                    "type": "regex",
                    "value": "  PID TTY          TIME CMD"
                }],
                "example": {
                    "success": "ps",
                    "failure": "echo Hello"
                }
            },
            "ps_aux": {
                "input": "console",
                "mapper": ["shell", "raw_output", {
                    "type": "regex",
                    "value": "USER\\s+PID\\s+%CPU\\s+%MEM\\s+VSZ\\s+RSS\\s+TTY\\s+STAT\\s+START\\s+TIME\\s+COMMAND"
                }],
                "example": {
                    "success": "ps aux",
                    "failure": "ps"
                }
            },
            "ps_aux_grep": {
                "input": "console",
                "mapper": ["shell", "raw_output", {
                    "type": "regex",
                    "value": "^.*grep.*showmehow-service.*"
                }],
                "example": {
                    "success": "ps aux | grep showmehow-service",
                    "failure": "ps aux"
                }
            },
            "ps_aux_grep_awk": {
                "input": "console",
                "mapper": ["shell", "raw_output", {
                    "type": "regex",
                    "value": "^[0-9]+"
                }],
                "example": {
                    "success": "ps aux | grep showmehow-service | awk '{ print $2 }'",
                    "failure": "ps aux | grep asdasd123"
                }
            },
            "view_proc_pid": {
                "input": "console",
                "mapper": ["shell", "wrapped_output", {
                    "type": "regex",
                    "value": "^attr.*"
                }],
                "example": {
                    "success": "ls /proc/1",
                    "failure": "ls /boot"
                }
            },
            "view_proc_cmdline": {
                "input": "console",
                "mapper": ["shell", "wrapped_output", {
                    "type": "regex",
                    "value": "^.*gjs.*"
                }],
                "example": {
                    "success": "echo gjs some command",
                    "failure": "echo hello"
                }
            }
        }
    },
    {
        "name": "weather_year",
        "available_to": ["chatbox"],
        "desc": "CodeView for Weather application",
        "practice": {
            "challenge": {
                "input": "console",
                "mapper": [{
                    "type": "regex",
                    "value": "2012"
                }],
                "example": {
                    "success": "2012",
                    "failure": "2016"
                }
            }
        }
    },
    {
        "name": "python_functions",
        "available_to": ["chatbox"],
        "desc": "Python functions attachment",
        "practice": {
            "challenge": {
                "input": "console",
                "mapper": [{
                    "type": "regex",
                    "value": "bjAmbb"
                }],
                "example": {
                    "success": "bjAmbb",
                    "failure": "none"
                }
            }
        }
    },
    {
        "name": "python_classes",
        "available_to": ["chatbox"],
        "desc": "Python classes attachment",
        "practice": {
            "challenge": {
                "input": "console",
                "mapper": [{
                    "type": "regex",
                    "value": "bob"
                }],
                "example": {
                    "success": "bob",
                    "failure": "fred"
                }
            }
        }
    },
    {
        "name": "python",
        "available_to": ["console"],
        "requires_session": true,
        "desc": "The basics of Python",
        "practice": {
            "add_numbers": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "runtime": "python"
                    }
                }, "wrapped_output", {
                    "type": "regex",
                    "value": "^11$"
                }],
                "example": {
                    "success": "7 + 4",
                    "failure": "7 + 2"
                }
            },
            "add_numbers_assignment": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "runtime": "python"
                    }
                }, {
                    "type": "shell_custom",
                    "value": {
                        "command": "print(a)",
                        "runtime": "python"
                    }
                }, "wrapped_output", {
                    "type": "regex",
                    "value": "^11$"
                }],
                "example": {
                    "success": "a = 7 + 4",
                    "failure": "7 + 2"
                }
            },
            "print_string": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "runtime": "python"
                    }
                }, "wrapped_output", {
                    "type": "regex",
                    "value": "^Hello, world!$"
                }],
                "example": {
                    "success": "print('Hello, world!')",
                    "failure": "print('Hello there world!')"
                }
            },
            "string_format": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "runtime": "python"
                    }
                }, "wrapped_output", {
                    "type": "regex",
                    "value": "^This is a string with a number: 7$"
                }],
                "example": {
                    "success": "print('This is a string with a number: {}'.format(7))",
                    "failure": "print('This is a string with a number: {'.format(7))"
                }
            },
            "split_string": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "runtime": "python"
                    }
                }, {
                    "type": "shell_custom",
                    "value": {
                        "command": "print(splitted)",
                        "runtime": "python"
                    }
                }, "wrapped_output", {
                    "type": "regex",
                    "value": "^\\['Hello', 'world'\\]$"
                }],
                "example": {
                    "success": "splitted = 'Hello world'.split(' ')",
                    "failure": "splitted = 'Hello, world'.split(' ')"
                }
            },
            "join_string": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "runtime": "python"
                    }
                }, "wrapped_output", {
                    "type": "regex",
                    "value": "^'Hello world'$"
                }],
                "example": {
                    "success": "' '.join(splitted)",
                    "failure": "'.'.join(splitted)"
                }
            }
        }
    }, {
        "name": "python_lists",
        "available_to": ["console"],
        "requires_session": true,
        "desc": "Working with lists in python",
        "practice": {
            "convert_list": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "runtime": "python",
                        "before": "numbers = [1, 2, 3, 4, 5]"
                    }
                }, {
                    "type": "shell_custom",
                    "value": {
                        "command": "print(fives)",
                        "runtime": "python"
                    }
                }, "wrapped_output", {
                    "type": "regex",
                    "value": "^\\[5, 10, 15, 20, 25\\]$"
                }],
                "example": {
                    "success": "fives = [i * 5 for i in numbers]",
                    "failure": "fives = [i * 4 for i in numbers]"
                }
            },
            "filter_list": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "runtime": "python"
                    }
                }, {
                    "type": "shell_custom",
                    "value": {
                        "command": "print(filtered)",
                        "runtime": "python"
                    }
                }, "wrapped_output", {
                    "type": "regex",
                    "value": "^\\[2, 4\\]$"
                }],
                "example": {
                    "success": "filtered = [i for i in numbers if i % 2 == 0]",
                    "failure": "filtered = [i for i in numbers]"
                }
            },
            "dict_comprehension": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "runtime": "python",
                        "before": "environment = 'PATH=/bin:/app/bin:/usr/bin\\nLD_LIBRARY_PATH=/lib:/app/lib:/usr/lib:/usr/lib/x86_64-linux-gnu\\nGI_TYPELIB_PATH=/app/lib/girepository-1.0:/usr/lib/girepository-1.0'"
                    }
                }, "wrapped_output", {
                    "type": "shell_custom",
                    "value": {
                        "runtime": "python",
                        "command": "print(sorted(environment_dict.items(), key=lambda i: i[0]))"
                    }
                }, "wrapped_output", {
                    "type": "regex",
                    "value": "^.*\\('GI_TYPELIB_PATH', '/app/lib/girepository-1.0:/usr/lib/girepository-1.0'\\), \\('LD_LIBRARY_PATH', '/lib:/app/lib:/usr/lib:/usr/lib/x86_64-linux-gnu'\\), \\('PATH', '/bin:/app/bin:/usr/bin'\\).*$"
                }],
                "example": {
                    "success": "environment_dict = { k: v for k, v in [x.split('=') for x in environment.split('\\n')] }",
                    "failure": "environment_dict = { k: v for k, v in [x.split('=') for x in environment.split('.')] }"
                }
            }
        }
    }, {
        "name": "python_gi",
        "available_to": ["console"],
        "requires_session": true,
        "desc": "Using GObject-Introspection to interact with system libraries",
        "practice": {
            "create_gi_binding": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "runtime": "python",
                        "before": "if globals().get('Gio', None):\n    del Gio\n\n"
                    }
                }, {
                    "type": "shell_custom",
                    "value": {
                        "command": "print(Gio)",
                        "runtime": "python"
                    }
                }, "wrapped_output", {
                    "type": "regex",
                    "value": "^.*GioProxyModule.*"
                }],
                "example": {
                    "success": "from gi.repository import Gio",
                    "failure": "from gi import Gio"
                }
            },
            "instantiate_gi_class": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "runtime": "python"
                    }
                }, {
                    "type": "shell_custom",
                    "value": {
                        "command": "print(notification)",
                        "runtime": "python"
                    }
                }, "wrapped_output", {
                    "type": "regex",
                    "value": "^.*Gio.Notification.*$"
                }],
                "example": {
                    "success": "notification = Gio.Notification.new('lunch-is-ready')",
                    "failure": "notification = 7"
                }
            },
            "send_gnotification": {
                "input": "console",
                "mapper": [{
                    "type": "shell",
                    "value": {
                        "runtime": "python"
                    }
                }, "wrapped_output", {
                    "type": "regex",
                    "value": "^.*$"
                }],
                "example": {
                    "success": "application.send_notification('Lunch is ready!', notification)"
                }
            }
        }
    }
]
